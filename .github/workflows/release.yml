name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: '18'

    - name: Get version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Generate changelog
      id: changelog
      run: |
        # Simple changelog generation (you can use tools like conventional-changelog)
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "## What's Changed" >> $GITHUB_OUTPUT
        git log --pretty=format:"* %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release v${{ steps.version.outputs.VERSION }}
        body: |
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ## Installation
          
          ### Backend
          ```bash
          docker pull ghcr.io/yourusername/badminton-backend:v${{ steps.version.outputs.VERSION }}
          ```
          
          ### Frontend
          Download the APK from the assets below or build from source.
          
          ## Full Changelog
          **Full Changelog**: https://github.com/yourusername/BadmintonGroup/compare/v${{ steps.version.outputs.VERSION }}...HEAD
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}

  build-and-publish:
    name: Build and Publish
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}-backend
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  build-mobile-app:
    name: Build Mobile App
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: '18'

    - name: Setup Expo CLI
      run: npm install -g @expo/cli

    - name: Install dependencies
      working-directory: ./frontend/BadmintonGroup
      run: npm ci

    - name: Build for production
      working-directory: ./frontend/BadmintonGroup
      run: |
        # Configure for production build
        echo "EXPO_PUBLIC_API_URL=https://api.badmintongroup.com/api/v1" > .env
        echo "EXPO_PUBLIC_SOCKET_URL=https://api.badmintongroup.com" >> .env
        echo "EXPO_PUBLIC_ENVIRONMENT=production" >> .env
        
        # Build the app
        npx expo export --platform all

    # Note: For actual app store builds, you'd need to set up EAS Build
    # - name: Build with EAS
    #   working-directory: ./frontend/BadmintonGroup
    #   run: |
    #     npm install -g @expo/eas-cli
    #     eas build --platform all --non-interactive
    #   env:
    #     EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}