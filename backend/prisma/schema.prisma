// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// MVP Models for First Version (No Authentication Required)
model MvpSession {
  id          String   @id @default(cuid())
  name        String   // City + Date + Time format

  // Session Details (Simplified)
  scheduledAt DateTime
  location    String?
  maxPlayers  Int      @default(20)
  skillLevel  String?
  cost        Float?
  description String?
  courtCount  Int      @default(1) // Number of available courts

  // Owner info stored directly (no user account required)
  ownerName   String
  ownerDeviceId String? // For session management

  // Shareable link
  shareCode   String   @unique // Short code for sharing

  // Status
  status MvpSessionStatus @default(ACTIVE)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  players MvpPlayer[]
  games   MvpGame[]

  @@map("mvp_sessions")
}

model MvpPlayer {
  id        String @id @default(cuid())
  sessionId String
  session   MvpSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  // Player info
  name       String
  deviceId   String? // For player identification

  // Player stats
  joinedAt     DateTime @default(now())
  status       MvpPlayerStatus @default(ACTIVE)
  gamesPlayed  Int      @default(0)
  wins         Int      @default(0)
  losses       Int      @default(0)

  @@unique([sessionId, name]) // Prevent duplicate names in same session
  @@unique([sessionId, deviceId]) // Prevent same device joining same session twice
  @@map("mvp_players")
}

// MVP Game tracking for session history
model MvpGame {
  id        String @id @default(cuid())
  sessionId String
  session   MvpSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  // Game metadata
  courtName   String?   // "Court 1", "Court 2", etc.
  gameNumber  Int       // Sequential game number in session
  
  // Teams (stored as JSON or separate fields)
  team1Player1 String   // Player names for flexibility
  team1Player2 String
  team2Player1 String
  team2Player2 String
  
  // Game results
  team1FinalScore Int @default(0)
  team2FinalScore Int @default(0)
  winnerTeam     Int?    // 1 or 2
  
  // Timing
  startTime DateTime?
  endTime   DateTime?
  duration  Int?        // Duration in minutes
  lastTeamChange DateTime? // Track when teams were last switched
  
  // Status
  status MvpGameStatus @default(IN_PROGRESS)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  sets MvpGameSet[]

  @@map("mvp_games")
}

// Individual sets within a game
model MvpGameSet {
  id     String @id @default(cuid())
  gameId String
  game   MvpGame @relation(fields: [gameId], references: [id], onDelete: Cascade)
  
  setNumber    Int
  team1Score   Int @default(0)
  team2Score   Int @default(0)
  winnerTeam   Int? // 1 or 2
  isCompleted  Boolean @default(false)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([gameId, setNumber])
  @@map("mvp_game_sets")
}

// MVP Enums
enum MvpSessionStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum MvpPlayerStatus {
  ACTIVE
  RESTING
  LEFT
}

enum MvpGameStatus {
  IN_PROGRESS
  COMPLETED
  PAUSED
  CANCELLED
}

// Users (Players and Session Owners)
model User {
  id        String   @id @default(cuid())
  name      String
  email     String?  @unique
  phone     String?
  avatarUrl String?

  // Authentication
  passwordHash String?
  deviceId     String?
  role         UserRole @default(PLAYER)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  ownedSessions    Session[]      @relation("SessionOwner")
  sessionPlayers   SessionPlayer[]

  @@map("users")
}

// Sessions (Badminton Games/Sessions)
model Session {
  id          String   @id @default(cuid())
  name        String   // City + Date + Time format
  ownerId     String
  owner       User     @relation("SessionOwner", fields: [ownerId], references: [id], onDelete: Cascade)

  // Session Details
  scheduledAt DateTime
  location    String?
  maxPlayers  Int      @default(20)
  skillLevel  String?
  cost        Float?
  description String?

  // Status
  status SessionStatus @default(ACTIVE)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sessionPlayers SessionPlayer[]

  @@map("sessions")
}

// Session Players (Many-to-many relationship)
model SessionPlayer {
  id        String @id @default(cuid())
  sessionId String
  userId    String
  session   Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Player Stats
  joinedAt     DateTime @default(now())
  status       PlayerStatus @default(ACTIVE)
  gamesPlayed  Int      @default(0)
  wins         Int      @default(0)
  losses       Int      @default(0)

  @@unique([sessionId, userId])
  @@map("session_players")
}

// Enums
enum UserRole {
  OWNER
  PLAYER
}

enum SessionStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum PlayerStatus {
  ACTIVE
  RESTING
  LEFT
}